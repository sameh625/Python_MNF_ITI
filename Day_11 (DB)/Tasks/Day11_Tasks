
----------------------- DAY 03 LAB -----------------------

-- Q1
-- 1. Count the total number of customers in the customers table.
-- SELECT COUNT(customer_id) AS "total customers" 
-- FROM customers

-- 2. Find the average price of all products from the products table.
-- SELECT AVG(price)::NUMERIC(10,2)  
-- FROM products;

-- 3. Find the maximum quantity ordered from the order_details table.
-- SELECT MAX(quantity) 
-- FROM order_details;

-- 4. Calculate the total price of all products in each category from the products table.
-- SELECT category_id,SUM(price * unit) AS "Total pric" 
-- FROM products 
-- GROUP BY category_id

-- 5. Find the minimum price of products in the products table where category_id is 1.
-- SELECT MIN(price) 
-- FROM products 
-- WHERE category_id = 1;

-- 6. Count how many customers are from each country.
-- SELECT country,COUNT(customer_id) 
-- FROM customers 
-- GROUP BY  country;

-- 7. Count the number of orders placed per customer from the orders table.
-- SELECT  customer_id, COUNT(order_id) AS "customer orders" 
-- FROM orders 
-- GROUP BY customer_id;













-- Q2
-- 1. Retrieve all orders with the corresponding customer name and order date using the orders and customers tables.
-- SELECT order_id, customer_name, order_date
-- FROM orders 
-- JOIN customers  ON orders.customer_id = customers.customer_id;

-- 2. List all product names and their ordered quantities using the order_details and products tables.
-- SELECT product_name, quantity
-- FROM order_details 
-- JOIN products  ON products.product_id = order_details.product_id;

-- 3. Show all customers who have placed at least one order using the orders and customers tables.

-- SELECT customer_name
-- FROM customers 
-- JOIN orders  ON customers.customer_id = orders.customer_id
-- GROUP BY customers.customer_id;

-- 4. Retrieve all products and their category names, including products that don't belong to any category.
-- SELECT product_name, category_name 
-- FROM products JOIN categories ON products.category_id = categories.category_id
-- WHERE products.category_id = null;

-- 5. List all customers and their order dates, including customers who haven't placed any orders.
-- SELECT customer_name, order_date
-- FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;

-- 6. Show all order details with product names and customer names for orders placed in 2024.
-- SELECT order_detail_id, product_name, customer_name, order_date
-- FROM order_details
-- JOIN orders ON order_details.order_id = orders.order_id
-- JOIN products ON products.product_id = order_details.product_id
-- JOIN customers ON customers.customer_id = orders.customer_id
-- WHERE order_date  BETWEEN '2024-01-01' AND '2024-12-31';

-- 7. Find the total number of products each customer has ordered.
-- SELECT  customer_name, COUNT(products.product_id) AS "total products" 
-- FROM products
-- JOIN order_details ON products.product_id = order_details.product_id
-- JOIN orders ON orders.order_id = order_details.order_id
-- JOIN customers ON orders.customer_id = customers.customer_id
-- GROUP BY customer_name;












-- Q3
-- 1. Display all products with a column price_level:
-- - 'Cheap' if price < 50
-- - 'Moderate' if price is between 50 and 100
-- - 'Expensive' if price > 100

-- SELECT price , 
-- CASE WHEN price < 50 THEN 'Cheap'
-- WHEN price BETWEEN 50 AND 100 THEN 'Moderate'
-- WHEN price >100 THEN 'Expensive'
-- END AS price_level 
-- FROM  products;



-- 2. Show each customer’s name with a column location_type:
-- - 'Egyptian' if country = 'Egypt'
-- - 'Foreign' otherwise

-- SELECT customer_name, 
-- CASE WHEN country = 'Egypt' THEN 'Egyptian'
-- ELSE 'Foreign'
-- END location_type
-- FROM customers;



-- 3. Select all order details with a column quantity_status:
-- - 'Low' if quantity < 5
-- - 'Medium' if quantity is between 5 and 10
-- - 'High' if quantity > 10

-- SELECT *, 
-- CASE WHEN quantity < 5 THEN 'Low' 
-- WHEN quantity BETWEEN 5 AND 10 THEN 'Medium' 
-- WHEN quantity > 10 THEN 'High'
-- END quantity_status FROM order_details;



-- 4. Add a column discount:
-- - 10% if price > 150
-- - 5% if price is between 100–150
-- - 0% otherwise

-- SELECT price , 
-- CASE WHEN price > 150 THEN '10%'
-- WHEN price BETWEEN 100 AND 150 THEN '5%'
-- ELSE '0%'
-- END discount 
-- FROM  products;









-- Q4
-- 1. List the top 3 most expensive products.
-- SELECT product_name, price 
-- FROM products 
-- ORDER BY price DESC LIMIT 3;


-- 2. List all products that do NOT belong to category IDs 1, 2, or 3.
-- SELECT category_name
-- FROM categories 
-- WHERE category_id NOT IN (1,2,3);









-- Q5
-- 1. Select product names that start with 'C' and end with 'e'.
-- SELECT product_name 
-- FROM products 
-- WHERE product_name LIKE 'C%e';

-- 2. Select product names that contain "ch" anywhere.
-- SELECT product_name
-- FROM products
-- WHERE product_name LIKE '%ch%';




